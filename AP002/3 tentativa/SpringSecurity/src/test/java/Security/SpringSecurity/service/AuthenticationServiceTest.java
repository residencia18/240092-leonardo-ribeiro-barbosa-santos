package Security.SpringSecurity.service;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;

import Security.SpringSecurity.dto.LoginRequest;
import Security.SpringSecurity.dto.LoginResponse;
import Security.SpringSecurity.dto.RegisterRequest;
import Security.SpringSecurity.entity.User;
import Security.SpringSecurity.mapper.UserMapper;
import Security.SpringSecurity.repository.UserRepository;
import Security.SpringSecurity.security.JwtProvider;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
public class AuthenticationServiceTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private AuthenticationManager authenticationManager;

    @Mock
    private JwtProvider jwtProvider;

    @Mock
    private UserMapper userMapper;

    @InjectMocks
    private AuthenticationService authenticationService;

    @Test
    public void testRegister() {
        // Mock RegisterRequest object
        RegisterRequest registerRequest = Mockito.mock(RegisterRequest.class);
        // Mock User object created by UserMapper
        User user = new User();
        // Configure mock behaviors
        Mockito.when(userMapper.fromRegisterRequest(registerRequest)).thenReturn(user);
        // Call the method to be tested
        authenticationService.register(registerRequest);
        // Verify mock interactions
        Mockito.verify(userRepository).save(user);
    }

    @Test
    public void testLogin() {
        // Mock LoginRequest object
        LoginRequest loginRequest = Mockito.mock(LoginRequest.class);
        // Mock Authentication object returned by authenticationManager
        Authentication authentication = Mockito.mock(Authentication.class);
        // Mock token generated by jwtProvider
        String token = "mock-token";
        // Configure mock behaviors
        Mockito.when(authenticationManager.authenticate(Mockito.any())).thenReturn(authentication);
        Mockito.when(jwtProvider.generateToken(authentication)).thenReturn(token);
        // Call the method to be tested
        LoginResponse loginResponse = authenticationService.login(loginRequest);
        // Verify mock interactions and assertions
        assertNotNull(loginResponse);
        assertEquals(token, loginResponse.token());
    }
}

